<template>
  <div class="flex h-screen items-center justify-center">
    <div
      class="w-full max-w-[380px] border border-border/60 bg-card px-8 py-5 shadow-sm dark:border-border min-[480px]:rounded-lg"
    >
      <h1 class="text-2xl font-bold tracking-tight lg:text-3xl">Se connecter</h1>
      <p class="mt-1 text-muted-foreground">Entrez votre email & votre mot de passe</p>

      <form class="mt-10" @submit.prevent="submit">
        <fieldset :disabled="isSubmitting" class="grid gap-5">
          <div>
            <UiVeeInput
              label="Email"
              type="email"
              name="email"
              v-model="form.email"
              placeholder="john@example.com"
            />
            <span v-if="errors.email" style="color: red">{{ errors.email[0] }}</span>
          </div>
          <div class="relative">
            <UiVeeInput
              label="Password"
              :type="isPasswordVisible ? 'text' : 'password'"
              name="password"
              v-model="form.password"
              placeholder="••••••••"
            />
            <span v-if="errors.password" style="color: red">{{ errors.password[0] }}</span>

            <span
              class="absolute inset-y-10 right-0 flex cursor-pointer items-center pr-1"
              @click="isPasswordVisible = !isPasswordVisible"
            >
              <UiFancyIcon
                :icon="isPasswordVisible ? 'lucide:eye' : 'lucide:eye-off'"
                type="dark"
                color="dark"
              />
            </span>
          </div>
          <div>
            <UiButton class="w-full" type="submit" text="Log in" />
          </div>
        </fieldset>
      </form>
      <p class="mt-8 text-sm">
        <NuxtLink class="font-semibold text-primary underline-offset-2 hover:underline" to="#"
          >Forgot password?</NuxtLink
        >
      </p>
      <p class="mt-4 text-sm text-muted-foreground">
        Don't have an account?
        <NuxtLink class="font-semibold text-primary underline-offset-2 hover:underline" to="#"
          >Create account</NuxtLink
        >
      </p>
    </div>
  </div>
  <Notivue v-slot="item">
    <Notification :item="item">
      <NotificationProgress :item="item" />
    </Notification>
  </Notivue>
</template>

<script setup>
  import { useAuthStore } from "~/stores/auth";
  import { useTokenStore } from "~/stores/token";
  import { object, string } from "yup";

  const auth = useAuthStore();
  const token = useTokenStore();
  const errors = ref([]);
  const isPasswordVisible = ref(false);
  const form = reactive({
    email: null,
    password: null,
    // email: "olouwagnon@gmail.com",
    // password: "Pa$$w0rd!",
  });

  useSeoMeta({
    title: "Se Connecter",
    description: "Entrez votre email & votre mot de passe",
  });

  definePageMeta({
    middleware: ["guest"],
    layout: "site",
  });

  const LoginSchema = object({
    email: string()
      .email()
      .required()
      .label("Email")
      .matches(/[A-Z0-9._%+-]+@[A-Z0-9-]+.+.[A-Z]{2,4}/gim, {
        message: "Adresse email invalide",
      }),
    password: string().required().label("Password").min(8),
  });

  const { handleSubmit, isSubmitting } = useForm({
    validationSchema: LoginSchema,
  });

  const submit = handleSubmit(async (_) => {
    alert("1");
    try {
      alert("2");
      await auth.login(form);
      await push.success({
        title: "Connexion",
        message: "Connexion établie avec succès !",
        props: {
          name: auth.getUser.name,
          email: auth.getUser.email,
        },
      });
    } catch (error) {
      if (error.message && error.message.includes("Failed to fetch")) {
        // Erreur de connexion réseau (ex. serveur éteint)
        useSonner.error("Connexion", {
          description:
            "Impossible de se connecter au serveur. Veuillez vérifier votre connexion réseau ou réessayer plus tard.",
        });
      } else if (error.response.status === 422) {
        // Autres erreurs (par exemple, validation, authentification)
        errors.value = error.response["_data"].errors;
      } else {
        // Autres erreurs générales
        useSonner.error("Connexion", {
          description: "Une erreur est survenue. Veuillez réessayer plus tard.",
        });
      }
    }
  });
</script>
